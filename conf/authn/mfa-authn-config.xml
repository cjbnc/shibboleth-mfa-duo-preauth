<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!--
    This is a map of transition rules that guide the behavior of the MFA flow
    and controls how factors are sequenced, skipped, etc. The key of each entry
    is the name of the step/flow out of which control is passing. The starting
    rule has an empty key.
    
    Each entry is a bean inherited from "shibboleth.authn.MFA.Transition". Per
    the Javadoc for net.shibboleth.idp.authn.MultiFactorAuthenticationTransition:
            
        p:nextFlow (String)
            - A flow to run if the previous step signaled a "proceed" event, for simple
                transitions.
                
        p:nextFlowStrategy (Function<ProfileRequestContext,String>)
            - A function to run if the previous step signaled a "proceed" event, for dynamic
                transitions. Returning null ends the MFA process.
            
        p:nextFlowStrategyMap (Map<String,Object> where Object is String or Function<ProfileRequestContext,String>)
            - Fully dynamic way of expressing control paths. Map is keyed by a previously
                signaled event and the value is a flow to run or a function to
                return the flow to run. Returning null ends the MFA process.
                
    When no rule is provided, there's an implicit "null" that ends the MFA flow
    with whatever event was last signaled. If the "proceed" event from a step is
    the final event, then the MFA process attempts to complete itself successfully.
    -->

    <util:map id="shibboleth.authn.MFA.TransitionMap">
        <!-- First rule runs the Password login flow. -->
        <entry key="">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/Password" />
        </entry>
        
        <!--
        Second rule tries a Duo preauth and may run the Duo login flow.
        -->
        <entry key="authn/Password">
            <bean parent="shibboleth.authn.MFA.Transition" 
                  p:nextFlowStrategy-ref="checkDuoPreauth" />
        </entry>

        <!-- An implicit final rule will return whatever the final flow returns. -->
    </util:map>

<bean id="checkDuoPreauth" 
      parent="shibboleth.ContextFunctions.Scripted" 
      factory-method="inlineScript"
      p:customObject-ref="shibboleth.AttributeResolverService">
    <constructor-arg>
        <value>
        <![CDATA[
            var maxRetry = 3;            // repeat preauth tries
            var timeOut  = 5;            // 5 seconds
            var duoScope = "@ncsu.edu";  // add to bare username to make duo username

            var logger = Java.type("org.slf4j.LoggerFactory").getLogger("net.shibboleth.idp.authn.impl.TransitionMultiFactorAuthentication");
            logger.debug("MFA checkDuoPreauth starts");

// inline function code includes

// do a preauth check with retries
function duoPreauth(username, host, ikey, skey) {
    var i = 0;

    // bypass duo - if needed for a failure
    // return {
    //     user: username,
    //     stat: "allow",
    //     mesg: "allowed after duo connectivity failures"
    // };

    while ( i < maxRetry ) {
        var result = duoPreauthOnce(username, host, ikey, skey);
        if (result.stat != "error" && typeof result.stat !== 'undefined') {
           return result;
        }
        i++;
    }
    logger.warn("MFA checkDuoPreauth - Passthru " + username + " after duo connectivity failures");
    return {
        user: username,
        stat: "allow",
        mesg: "allowed after duo connectivity failures"
    };
}

// defines the duo preauth function in simple javascript
function duoPreauthOnce(username, host, ikey, skey) {
    var restPath = "/auth/v2/preauth";

    // use duo-client to make REST call
    try {
        var duoHttp = Java.type("com.duosecurity.client.Http");
        duoRequest = new duoHttp( "POST", host, restPath, timeOut );
        duoRequest.addParam("username", username + duoScope);
        duoRequest.signRequest(ikey, skey, 2); 
        dResult = duoRequest.executeRequest();
        logger.debug("MFA checkDuoPreauth - dResult.stat = " + dResult.getString("result") );
        logger.debug("MFA checkDuoPreauth - status_msg = " + dResult.getString("status_msg") );
        duoRequest = null;  // cleanup
    }
    catch(err) {
        // timeout or other error
        logger.warn("MFA checkDuoPreauth - duo-client failed: " + err);
        return "error";  // might retry
    }
    return {
      user: username,
      stat: dResult.getString("result"),
      mesg: dResult.getString("status_msg")
    };
}

// done with includes. checkDuoPreauth resumes

            // default
            nextFlow = "authn/Duo";

            // Go straight to second factor if we have to, or set up for an attribute lookup first.
            authCtx = input.getSubcontext("net.shibboleth.idp.authn.context.AuthenticationContext");
            mfaCtx = authCtx.getSubcontext("net.shibboleth.idp.authn.context.MultiFactorAuthenticationContext");

            // Look up the username
            usernameLookupStrategyClass = Java.type("net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy");
            usernameLookupStrategy = new usernameLookupStrategyClass();
            bareUsername = usernameLookupStrategy.apply(input);

            // call the preauth function
            result = duoPreauth( 
              bareUsername,
              "%{idp.duopreauth.apiHost}",
              "%{idp.duopreauth.integrationKey}",
              "%{idp.duopreauth.secretKey}"
            );
            logger.info("MFA checkDuoPreauth - preauth " 
              + 'user="' + bareUsername 
              + '" result="' + result.stat
              + '" status_msg="' + result.mesg
              + '"'
            );
            if (result.stat == "allow") {
                if (mfaCtx.isAcceptable()) {
                    nextFlow = null;
                } else {
                    // MFA required, not enrolled
                    mfaCtx.setEvent("DuoNotEnrolled");
                    nextFlow = null;
                }
            } else {
                nextFlow = "authn/Duo";
            }

            logger.debug("MFA checkDuoPreauth returns " + nextFlow);
            nextFlow;   // pass control to second factor or end with the first
        ]]>
        </value>
    </constructor-arg> 
</bean>
</beans>
