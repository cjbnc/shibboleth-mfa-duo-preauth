<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!--
    This is a map of transition rules that guide the behavior of the MFA flow
    and controls how factors are sequenced, skipped, etc. The key of each entry
    is the name of the step/flow out of which control is passing. The starting
    rule has an empty key.
    
    Each entry is a bean inherited from "shibboleth.authn.MFA.Transition". Per
    the Javadoc for net.shibboleth.idp.authn.MultiFactorAuthenticationTransition:
            
        p:nextFlow (String)
            - A flow to run if the previous step signaled a "proceed" event, for simple
                transitions.
                
        p:nextFlowStrategy (Function<ProfileRequestContext,String>)
            - A function to run if the previous step signaled a "proceed" event, for dynamic
                transitions. Returning null ends the MFA process.
            
        p:nextFlowStrategyMap (Map<String,Object> where Object is String or Function<ProfileRequestContext,String>)
            - Fully dynamic way of expressing control paths. Map is keyed by a previously
                signaled event and the value is a flow to run or a function to
                return the flow to run. Returning null ends the MFA process.
                
    When no rule is provided, there's an implicit "null" that ends the MFA flow
    with whatever event was last signaled. If the "proceed" event from a step is
    the final event, then the MFA process attempts to complete itself successfully.
    -->

    <util:map id="shibboleth.authn.MFA.TransitionMap">
        <!-- First rule runs the Password login flow. -->
        <entry key="">
            <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/Password" />
        </entry>
        
        <!--
        Second rule tries a Duo preauth and may run the Duo login flow.
        -->
        <entry key="authn/Password">
            <bean parent="shibboleth.authn.MFA.Transition" 
                  p:nextFlowStrategy-ref="checkDuoPreauth" />
        </entry>

        <!-- An implicit final rule will return whatever the final flow returns. -->
    </util:map>

<bean id="checkDuoPreauth" 
      parent="shibboleth.ContextFunctions.Scripted" 
      factory-method="inlineScript"
      p:customObject-ref="shibboleth.AttributeResolverService">
    <constructor-arg>
        <value>
        <![CDATA[
            var maxRetry = 3;            // repeat preauth tries
            var timeOut  = 5 * 1000;     // 5 seconds
            var duoScope = "@ncsu.edu";  // add to bare username to make duo username

            var logger = Java.type("org.slf4j.LoggerFactory").getLogger("net.shibboleth.idp.authn.impl.TransitionMultiFactorAuthentication");
            logger.debug("MFA checkDuoPreauth starts");

// inline code includes

// functions below re-uses code from 
// "nashorn javascript http client"
// https://gist.github.com/billybong/a462152889b6616deb02

// do a preauth check with retries
function duoPreauth(username, host, ikey, skey) {
    var i = 0;
    while ( i < maxRetry ) {
        var result = duoPreauthOnce(username, host, ikey, skey);
        if (result != "error") {
           return result;
        }
        i++;
    }
    logger.warn("MFA checkDuoPreauth - Passthru " + username + " after duo connectivity failures");
    return "allow";
}

// defines the duo preauth function in simple javascript
function duoPreauthOnce(username, host, ikey, skey) {
    var postdata = "username=" + encodeURIComponent(username + duoScope);
    logger.debug("MFA checkDuoPreauth - postdata = " + postdata);

    var restPath = "/auth/v2/preauth";
    var preauthUrl = "https://" + host + restPath;
    logger.debug("MFA checkDuoPreauth - preauthUrl = " + preauthUrl);

    var dateHeader = new Date().toUTCString();
    logger.debug("MFA checkDuoPreauth - dateHeader = " + dateHeader);

    var unsigned 
      = dateHeader + "\n" + "POST" + "\n" + host + "\n"
      + restPath + "\n" + postdata;
    logger.debug("MFA checkDuoPreauth - unsigned = " + unsigned);

    var mac = javax.crypto.Mac.getInstance("HmacSHA1");
    var secretKey = new javax.crypto.spec.SecretKeySpec( skey.getBytes(), "HmacSHA1" );
    mac.init( secretKey );
    hmac = javax.xml.bind.DatatypeConverter.printHexBinary(mac.doFinal( unsigned.getBytes()));
    logger.debug("MFA checkDuoPreauth - hmac = " + hmac);

    var basicAuth = javax.xml.bind.DatatypeConverter.printBase64Binary( String(ikey + ':' + hmac).getBytes() );
    logger.debug("MFA checkDuoPreauth - basicAuth = " + basicAuth);

    try {
        // make the connection
        var con = new java.net.URL(preauthUrl).openConnection(); 
        con.requestMethod = "POST";
        con.setRequestProperty("Authorization", "Basic " + basicAuth);
        con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        con.setRequestProperty("Date", dateHeader);
        con.setConnectTimeout(timeOut);
        con.doOutput = true;

        var wr = new java.io.DataOutputStream(con.outputStream);
        wr.writeBytes(postdata);
        wr.flush();
        wr.close();

        if (con.responseCode == 200) {  
            logger.debug("MFA checkDuoPreauth - REST returned 200 OK");
            var inReader = new java.io.BufferedReader(new java.io.InputStreamReader(con.inputStream));
            var inputLine;
            var response = new java.lang.StringBuffer();

            while ((inputLine = inReader.readLine()) != null) {
                response.append(inputLine);
            }
            inReader.close();
            var answer = JSON.parse(response.toString());
        } else if (con.responseCode >= 500) {
            logger.warn("MFA checkDuoPreauth - REST returned HTTP code  = " + con.responseCode);
            return "allow";  // these errors passthru immediately
        } else {
            logger.warn("MFA checkDuoPreauth - REST returned HTTP code  = " + con.responseCode);
            return "error";  // anything else might retry
        }
    }
    catch(err) {
        // timeout or other error
        logger.warn("MFA checkDuoPreauth - failed: " + err);
        return "error";  // might retry
    }

    if (answer.stat == "OK") {
        logger.info("MFA checkDuoPreauth - Preauth " + username + " = " + answer.response.status_msg);
        return answer.response.result;
    } else {
        logger.warn("MFA checkDuoPreauth - stat = " + answer.stat );
        return "error";  // might retry
    }
}

// done with includes. function resumes

            // default
            nextFlow = "authn/Duo";

            // Go straight to second factor if we have to, or set up for an attribute lookup first.
            authCtx = input.getSubcontext("net.shibboleth.idp.authn.context.AuthenticationContext");
            mfaCtx = authCtx.getSubcontext("net.shibboleth.idp.authn.context.MultiFactorAuthenticationContext");
            if (mfaCtx.isAcceptable()) {

                // Look up the username
                usernameLookupStrategyClass = Java.type("net.shibboleth.idp.session.context.navigate.CanonicalUsernameLookupStrategy");
                usernameLookupStrategy = new usernameLookupStrategyClass();
                bareUsername = usernameLookupStrategy.apply(input);

                // call the preauth function
                result = duoPreauth( 
                  bareUsername,
                  "%{idp.duo.apiHost}",
                  "%{idp.duo.integrationKey}",
                  "%{idp.duo.secretKey}"
                );
                logger.debug("MFA checkDuoPreauth - preauth result = " + result);
 
                if (result == "auth") {
                    nextFlow = "authn/Duo";
                } else {
                    nextFlow = null;
                }
            }

            logger.debug("MFA checkDuoPreauth returns " + nextFlow);
            nextFlow;   // pass control to second factor or end with the first
        ]]>
        </value>
    </constructor-arg> 
</bean>
</beans>
